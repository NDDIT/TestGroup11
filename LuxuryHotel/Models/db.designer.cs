#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LuxuryHotel.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LuxuryHotel")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBOOKING(BOOKING instance);
    partial void UpdateBOOKING(BOOKING instance);
    partial void DeleteBOOKING(BOOKING instance);
    partial void InsertCHECKINROOM(CHECKINROOM instance);
    partial void UpdateCHECKINROOM(CHECKINROOM instance);
    partial void DeleteCHECKINROOM(CHECKINROOM instance);
    partial void InsertCHECKOUTROOM(CHECKOUTROOM instance);
    partial void UpdateCHECKOUTROOM(CHECKOUTROOM instance);
    partial void DeleteCHECKOUTROOM(CHECKOUTROOM instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertUtility(Utility instance);
    partial void UpdateUtility(Utility instance);
    partial void DeleteUtility(Utility instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertPAYMENT(PAYMENT instance);
    partial void UpdatePAYMENT(PAYMENT instance);
    partial void DeletePAYMENT(PAYMENT instance);
    partial void InsertRECEPTION(RECEPTION instance);
    partial void UpdateRECEPTION(RECEPTION instance);
    partial void DeleteRECEPTION(RECEPTION instance);
    partial void InsertREVIEW(REVIEW instance);
    partial void UpdateREVIEW(REVIEW instance);
    partial void DeleteREVIEW(REVIEW instance);
    partial void InsertROOM(ROOM instance);
    partial void UpdateROOM(ROOM instance);
    partial void DeleteROOM(ROOM instance);
    partial void InsertROOMTYPE(ROOMTYPE instance);
    partial void UpdateROOMTYPE(ROOMTYPE instance);
    partial void DeleteROOMTYPE(ROOMTYPE instance);
    partial void InsertRoomUtility(RoomUtility instance);
    partial void UpdateRoomUtility(RoomUtility instance);
    partial void DeleteRoomUtility(RoomUtility instance);
    partial void InsertSERVICE(SERVICE instance);
    partial void UpdateSERVICE(SERVICE instance);
    partial void DeleteSERVICE(SERVICE instance);
    partial void InsertSERVICEREQUEST(SERVICEREQUEST instance);
    partial void UpdateSERVICEREQUEST(SERVICEREQUEST instance);
    partial void DeleteSERVICEREQUEST(SERVICEREQUEST instance);
    #endregion
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
        public dbDataContext() :
        base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LuxuryHotelConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BOOKING> BOOKINGs
		{
			get
			{
				return this.GetTable<BOOKING>();
			}
		}
		
		public System.Data.Linq.Table<CHECKINROOM> CHECKINROOMs
		{
			get
			{
				return this.GetTable<CHECKINROOM>();
			}
		}
		
		public System.Data.Linq.Table<CHECKOUTROOM> CHECKOUTROOMs
		{
			get
			{
				return this.GetTable<CHECKOUTROOM>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<Utility> Utilities
		{
			get
			{
				return this.GetTable<Utility>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<PAYMENT> PAYMENTs
		{
			get
			{
				return this.GetTable<PAYMENT>();
			}
		}
		
		public System.Data.Linq.Table<RECEPTION> RECEPTIONs
		{
			get
			{
				return this.GetTable<RECEPTION>();
			}
		}
		
		public System.Data.Linq.Table<REVIEW> REVIEWs
		{
			get
			{
				return this.GetTable<REVIEW>();
			}
		}
		
		public System.Data.Linq.Table<ROOM> ROOMs
		{
			get
			{
				return this.GetTable<ROOM>();
			}
		}
		
		public System.Data.Linq.Table<ROOMTYPE> ROOMTYPEs
		{
			get
			{
				return this.GetTable<ROOMTYPE>();
			}
		}
		
		public System.Data.Linq.Table<RoomUtility> RoomUtilities
		{
			get
			{
				return this.GetTable<RoomUtility>();
			}
		}
		
		public System.Data.Linq.Table<SERVICE> SERVICEs
		{
			get
			{
				return this.GetTable<SERVICE>();
			}
		}
		
		public System.Data.Linq.Table<SERVICEREQUEST> SERVICEREQUESTs
		{
			get
			{
				return this.GetTable<SERVICEREQUEST>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BOOKING")]
	public partial class BOOKING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookingID;
		
		private System.Nullable<System.DateTime> _BookingDate;
		
		private System.Nullable<System.DateTime> _CheckInDate;
		
		private System.Nullable<System.DateTime> _CheckOutDate;
		
		private System.Nullable<int> _RoomID;
		
		private string _PaymentStatus;
		
		private System.Nullable<int> _CustomerID;
		
		private EntitySet<CHECKINROOM> _CHECKINROOMs;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<ROOM> _ROOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookingIDChanging(int value);
    partial void OnBookingIDChanged();
    partial void OnBookingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBookingDateChanged();
    partial void OnCheckInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckInDateChanged();
    partial void OnCheckOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckOutDateChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    partial void OnPaymentStatusChanging(string value);
    partial void OnPaymentStatusChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public BOOKING()
		{
			this._CHECKINROOMs = new EntitySet<CHECKINROOM>(new Action<CHECKINROOM>(this.attach_CHECKINROOMs), new Action<CHECKINROOM>(this.detach_CHECKINROOMs));
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._ROOM = default(EntityRef<ROOM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookingID
		{
			get
			{
				return this._BookingID;
			}
			set
			{
				if ((this._BookingID != value))
				{
					this.OnBookingIDChanging(value);
					this.SendPropertyChanging();
					this._BookingID = value;
					this.SendPropertyChanged("BookingID");
					this.OnBookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BookingDate
		{
			get
			{
				return this._BookingDate;
			}
			set
			{
				if ((this._BookingDate != value))
				{
					this.OnBookingDateChanging(value);
					this.SendPropertyChanging();
					this._BookingDate = value;
					this.SendPropertyChanged("BookingDate");
					this.OnBookingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckInDate
		{
			get
			{
				return this._CheckInDate;
			}
			set
			{
				if ((this._CheckInDate != value))
				{
					this.OnCheckInDateChanging(value);
					this.SendPropertyChanging();
					this._CheckInDate = value;
					this.SendPropertyChanged("CheckInDate");
					this.OnCheckInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckOutDate
		{
			get
			{
				return this._CheckOutDate;
			}
			set
			{
				if ((this._CheckOutDate != value))
				{
					this.OnCheckOutDateChanging(value);
					this.SendPropertyChanging();
					this._CheckOutDate = value;
					this.SendPropertyChanged("CheckOutDate");
					this.OnCheckOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int")]
		public System.Nullable<int> RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._ROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatus", DbType="NVarChar(50)")]
		public string PaymentStatus
		{
			get
			{
				return this._PaymentStatus;
			}
			set
			{
				if ((this._PaymentStatus != value))
				{
					this.OnPaymentStatusChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatus = value;
					this.SendPropertyChanged("PaymentStatus");
					this.OnPaymentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BOOKING_CHECKINROOM", Storage="_CHECKINROOMs", ThisKey="BookingID", OtherKey="BookingID")]
		public EntitySet<CHECKINROOM> CHECKINROOMs
		{
			get
			{
				return this._CHECKINROOMs;
			}
			set
			{
				this._CHECKINROOMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_BOOKING", Storage="_CUSTOMER", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.BOOKINGs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.BOOKINGs.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_BOOKING", Storage="_ROOM", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public ROOM ROOM
		{
			get
			{
				return this._ROOM.Entity;
			}
			set
			{
				ROOM previousValue = this._ROOM.Entity;
				if (((previousValue != value) 
							|| (this._ROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOM.Entity = null;
						previousValue.BOOKINGs.Remove(this);
					}
					this._ROOM.Entity = value;
					if ((value != null))
					{
						value.BOOKINGs.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ROOM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHECKINROOMs(CHECKINROOM entity)
		{
			this.SendPropertyChanging();
			entity.BOOKING = this;
		}
		
		private void detach_CHECKINROOMs(CHECKINROOM entity)
		{
			this.SendPropertyChanging();
			entity.BOOKING = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CHECKINROOM")]
	public partial class CHECKINROOM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CheckinID;
		
		private System.Nullable<int> _BookingID;
		
		private System.Nullable<int> _RoomID;
		
		private System.Nullable<System.DateTime> _CheckInDate;
		
		private System.Nullable<int> _ReceptionID;
		
		private EntitySet<CHECKOUTROOM> _CHECKOUTROOMs;
		
		private EntitySet<PAYMENT> _PAYMENTs;
		
		private EntitySet<SERVICEREQUEST> _SERVICEREQUESTs;
		
		private EntityRef<BOOKING> _BOOKING;
		
		private EntityRef<RECEPTION> _RECEPTION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheckinIDChanging(int value);
    partial void OnCheckinIDChanged();
    partial void OnBookingIDChanging(System.Nullable<int> value);
    partial void OnBookingIDChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    partial void OnCheckInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckInDateChanged();
    partial void OnReceptionIDChanging(System.Nullable<int> value);
    partial void OnReceptionIDChanged();
    #endregion
		
		public CHECKINROOM()
		{
			this._CHECKOUTROOMs = new EntitySet<CHECKOUTROOM>(new Action<CHECKOUTROOM>(this.attach_CHECKOUTROOMs), new Action<CHECKOUTROOM>(this.detach_CHECKOUTROOMs));
			this._PAYMENTs = new EntitySet<PAYMENT>(new Action<PAYMENT>(this.attach_PAYMENTs), new Action<PAYMENT>(this.detach_PAYMENTs));
			this._SERVICEREQUESTs = new EntitySet<SERVICEREQUEST>(new Action<SERVICEREQUEST>(this.attach_SERVICEREQUESTs), new Action<SERVICEREQUEST>(this.detach_SERVICEREQUESTs));
			this._BOOKING = default(EntityRef<BOOKING>);
			this._RECEPTION = default(EntityRef<RECEPTION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckinID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CheckinID
		{
			get
			{
				return this._CheckinID;
			}
			set
			{
				if ((this._CheckinID != value))
				{
					this.OnCheckinIDChanging(value);
					this.SendPropertyChanging();
					this._CheckinID = value;
					this.SendPropertyChanged("CheckinID");
					this.OnCheckinIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingID", DbType="Int")]
		public System.Nullable<int> BookingID
		{
			get
			{
				return this._BookingID;
			}
			set
			{
				if ((this._BookingID != value))
				{
					if (this._BOOKING.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookingIDChanging(value);
					this.SendPropertyChanging();
					this._BookingID = value;
					this.SendPropertyChanged("BookingID");
					this.OnBookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int")]
		public System.Nullable<int> RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckInDate
		{
			get
			{
				return this._CheckInDate;
			}
			set
			{
				if ((this._CheckInDate != value))
				{
					this.OnCheckInDateChanging(value);
					this.SendPropertyChanging();
					this._CheckInDate = value;
					this.SendPropertyChanged("CheckInDate");
					this.OnCheckInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptionID", DbType="Int")]
		public System.Nullable<int> ReceptionID
		{
			get
			{
				return this._ReceptionID;
			}
			set
			{
				if ((this._ReceptionID != value))
				{
					if (this._RECEPTION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceptionIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptionID = value;
					this.SendPropertyChanged("ReceptionID");
					this.OnReceptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHECKINROOM_CHECKOUTROOM", Storage="_CHECKOUTROOMs", ThisKey="CheckinID", OtherKey="CheckinID")]
		public EntitySet<CHECKOUTROOM> CHECKOUTROOMs
		{
			get
			{
				return this._CHECKOUTROOMs;
			}
			set
			{
				this._CHECKOUTROOMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHECKINROOM_PAYMENT", Storage="_PAYMENTs", ThisKey="CheckinID", OtherKey="CheckinID")]
		public EntitySet<PAYMENT> PAYMENTs
		{
			get
			{
				return this._PAYMENTs;
			}
			set
			{
				this._PAYMENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHECKINROOM_SERVICEREQUEST", Storage="_SERVICEREQUESTs", ThisKey="CheckinID", OtherKey="CheckinID")]
		public EntitySet<SERVICEREQUEST> SERVICEREQUESTs
		{
			get
			{
				return this._SERVICEREQUESTs;
			}
			set
			{
				this._SERVICEREQUESTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BOOKING_CHECKINROOM", Storage="_BOOKING", ThisKey="BookingID", OtherKey="BookingID", IsForeignKey=true)]
		public BOOKING BOOKING
		{
			get
			{
				return this._BOOKING.Entity;
			}
			set
			{
				BOOKING previousValue = this._BOOKING.Entity;
				if (((previousValue != value) 
							|| (this._BOOKING.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BOOKING.Entity = null;
						previousValue.CHECKINROOMs.Remove(this);
					}
					this._BOOKING.Entity = value;
					if ((value != null))
					{
						value.CHECKINROOMs.Add(this);
						this._BookingID = value.BookingID;
					}
					else
					{
						this._BookingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BOOKING");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECEPTION_CHECKINROOM", Storage="_RECEPTION", ThisKey="ReceptionID", OtherKey="ReceptionID", IsForeignKey=true)]
		public RECEPTION RECEPTION
		{
			get
			{
				return this._RECEPTION.Entity;
			}
			set
			{
				RECEPTION previousValue = this._RECEPTION.Entity;
				if (((previousValue != value) 
							|| (this._RECEPTION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RECEPTION.Entity = null;
						previousValue.CHECKINROOMs.Remove(this);
					}
					this._RECEPTION.Entity = value;
					if ((value != null))
					{
						value.CHECKINROOMs.Add(this);
						this._ReceptionID = value.ReceptionID;
					}
					else
					{
						this._ReceptionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RECEPTION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHECKOUTROOMs(CHECKOUTROOM entity)
		{
			this.SendPropertyChanging();
			entity.CHECKINROOM = this;
		}
		
		private void detach_CHECKOUTROOMs(CHECKOUTROOM entity)
		{
			this.SendPropertyChanging();
			entity.CHECKINROOM = null;
		}
		
		private void attach_PAYMENTs(PAYMENT entity)
		{
			this.SendPropertyChanging();
			entity.CHECKINROOM = this;
		}
		
		private void detach_PAYMENTs(PAYMENT entity)
		{
			this.SendPropertyChanging();
			entity.CHECKINROOM = null;
		}
		
		private void attach_SERVICEREQUESTs(SERVICEREQUEST entity)
		{
			this.SendPropertyChanging();
			entity.CHECKINROOM = this;
		}
		
		private void detach_SERVICEREQUESTs(SERVICEREQUEST entity)
		{
			this.SendPropertyChanging();
			entity.CHECKINROOM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CHECKOUTROOM")]
	public partial class CHECKOUTROOM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CheckoutID;
		
		private System.Nullable<int> _CheckinID;
		
		private System.Nullable<System.DateTime> _CheckoutDate;
		
		private System.Nullable<int> _Toltal;
		
		private EntityRef<CHECKINROOM> _CHECKINROOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheckoutIDChanging(int value);
    partial void OnCheckoutIDChanged();
    partial void OnCheckinIDChanging(System.Nullable<int> value);
    partial void OnCheckinIDChanged();
    partial void OnCheckoutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckoutDateChanged();
    partial void OnToltalChanging(System.Nullable<int> value);
    partial void OnToltalChanged();
    #endregion
		
		public CHECKOUTROOM()
		{
			this._CHECKINROOM = default(EntityRef<CHECKINROOM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckoutID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CheckoutID
		{
			get
			{
				return this._CheckoutID;
			}
			set
			{
				if ((this._CheckoutID != value))
				{
					this.OnCheckoutIDChanging(value);
					this.SendPropertyChanging();
					this._CheckoutID = value;
					this.SendPropertyChanged("CheckoutID");
					this.OnCheckoutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckinID", DbType="Int")]
		public System.Nullable<int> CheckinID
		{
			get
			{
				return this._CheckinID;
			}
			set
			{
				if ((this._CheckinID != value))
				{
					if (this._CHECKINROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckinIDChanging(value);
					this.SendPropertyChanging();
					this._CheckinID = value;
					this.SendPropertyChanged("CheckinID");
					this.OnCheckinIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckoutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckoutDate
		{
			get
			{
				return this._CheckoutDate;
			}
			set
			{
				if ((this._CheckoutDate != value))
				{
					this.OnCheckoutDateChanging(value);
					this.SendPropertyChanging();
					this._CheckoutDate = value;
					this.SendPropertyChanged("CheckoutDate");
					this.OnCheckoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Toltal", DbType="Int")]
		public System.Nullable<int> Toltal
		{
			get
			{
				return this._Toltal;
			}
			set
			{
				if ((this._Toltal != value))
				{
					this.OnToltalChanging(value);
					this.SendPropertyChanging();
					this._Toltal = value;
					this.SendPropertyChanged("Toltal");
					this.OnToltalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHECKINROOM_CHECKOUTROOM", Storage="_CHECKINROOM", ThisKey="CheckinID", OtherKey="CheckinID", IsForeignKey=true)]
		public CHECKINROOM CHECKINROOM
		{
			get
			{
				return this._CHECKINROOM.Entity;
			}
			set
			{
				CHECKINROOM previousValue = this._CHECKINROOM.Entity;
				if (((previousValue != value) 
							|| (this._CHECKINROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHECKINROOM.Entity = null;
						previousValue.CHECKOUTROOMs.Remove(this);
					}
					this._CHECKINROOM.Entity = value;
					if ((value != null))
					{
						value.CHECKOUTROOMs.Add(this);
						this._CheckinID = value.CheckinID;
					}
					else
					{
						this._CheckinID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CHECKINROOM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _User;
		
		private string _Password;
		
		private string _FullName;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private EntitySet<BOOKING> _BOOKINGs;
		
		private EntitySet<REVIEW> _REVIEWs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._BOOKINGs = new EntitySet<BOOKING>(new Action<BOOKING>(this.attach_BOOKINGs), new Action<BOOKING>(this.detach_BOOKINGs));
			this._REVIEWs = new EntitySet<REVIEW>(new Action<REVIEW>(this.attach_REVIEWs), new Action<REVIEW>(this.detach_REVIEWs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="NVarChar(255)")]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(255)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_BOOKING", Storage="_BOOKINGs", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<BOOKING> BOOKINGs
		{
			get
			{
				return this._BOOKINGs;
			}
			set
			{
				this._BOOKINGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_REVIEW", Storage="_REVIEWs", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<REVIEW> REVIEWs
		{
			get
			{
				return this._REVIEWs;
			}
			set
			{
				this._REVIEWs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BOOKINGs(BOOKING entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_BOOKINGs(BOOKING entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
		
		private void attach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Utilities")]
	public partial class Utility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UtilitiesID;
		
		private string _UtilitiesName;
		
		private string _UtilitiesPicture;
		
		private EntitySet<RoomUtility> _RoomUtilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUtilitiesIDChanging(int value);
    partial void OnUtilitiesIDChanged();
    partial void OnUtilitiesNameChanging(string value);
    partial void OnUtilitiesNameChanged();
    partial void OnUtilitiesPictureChanging(string value);
    partial void OnUtilitiesPictureChanged();
    #endregion
		
		public Utility()
		{
			this._RoomUtilities = new EntitySet<RoomUtility>(new Action<RoomUtility>(this.attach_RoomUtilities), new Action<RoomUtility>(this.detach_RoomUtilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilitiesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UtilitiesID
		{
			get
			{
				return this._UtilitiesID;
			}
			set
			{
				if ((this._UtilitiesID != value))
				{
					this.OnUtilitiesIDChanging(value);
					this.SendPropertyChanging();
					this._UtilitiesID = value;
					this.SendPropertyChanged("UtilitiesID");
					this.OnUtilitiesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilitiesName", DbType="NVarChar(255)")]
		public string UtilitiesName
		{
			get
			{
				return this._UtilitiesName;
			}
			set
			{
				if ((this._UtilitiesName != value))
				{
					this.OnUtilitiesNameChanging(value);
					this.SendPropertyChanging();
					this._UtilitiesName = value;
					this.SendPropertyChanged("UtilitiesName");
					this.OnUtilitiesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilitiesPicture", DbType="NVarChar(MAX)")]
		public string UtilitiesPicture
		{
			get
			{
				return this._UtilitiesPicture;
			}
			set
			{
				if ((this._UtilitiesPicture != value))
				{
					this.OnUtilitiesPictureChanging(value);
					this.SendPropertyChanging();
					this._UtilitiesPicture = value;
					this.SendPropertyChanged("UtilitiesPicture");
					this.OnUtilitiesPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utility_RoomUtility", Storage="_RoomUtilities", ThisKey="UtilitiesID", OtherKey="UtilitiesID")]
		public EntitySet<RoomUtility> RoomUtilities
		{
			get
			{
				return this._RoomUtilities;
			}
			set
			{
				this._RoomUtilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoomUtilities(RoomUtility entity)
		{
			this.SendPropertyChanging();
			entity.Utility = this;
		}
		
		private void detach_RoomUtilities(RoomUtility entity)
		{
			this.SendPropertyChanging();
			entity.Utility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private int _RoomID;
		
		private string _ImagePath;
		
		private System.Nullable<int> _OderID;
		
		private EntityRef<ROOM> _ROOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnOderIDChanging(System.Nullable<int> value);
    partial void OnOderIDChanged();
    #endregion
		
		public Image()
		{
			this._ROOM = default(EntityRef<ROOM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._ROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OderID", DbType="Int")]
		public System.Nullable<int> OderID
		{
			get
			{
				return this._OderID;
			}
			set
			{
				if ((this._OderID != value))
				{
					this.OnOderIDChanging(value);
					this.SendPropertyChanging();
					this._OderID = value;
					this.SendPropertyChanged("OderID");
					this.OnOderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_Image", Storage="_ROOM", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public ROOM ROOM
		{
			get
			{
				return this._ROOM.Entity;
			}
			set
			{
				ROOM previousValue = this._ROOM.Entity;
				if (((previousValue != value) 
							|| (this._ROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOM.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._ROOM.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("ROOM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PAYMENT")]
	public partial class PAYMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Payid;
		
		private System.Nullable<int> _CheckinID;
		
		private string _PaymentStatus;
		
		private string _PaymentMethods;
		
		private EntityRef<CHECKINROOM> _CHECKINROOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayidChanging(int value);
    partial void OnPayidChanged();
    partial void OnCheckinIDChanging(System.Nullable<int> value);
    partial void OnCheckinIDChanged();
    partial void OnPaymentStatusChanging(string value);
    partial void OnPaymentStatusChanged();
    partial void OnPaymentMethodsChanging(string value);
    partial void OnPaymentMethodsChanged();
    #endregion
		
		public PAYMENT()
		{
			this._CHECKINROOM = default(EntityRef<CHECKINROOM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Payid
		{
			get
			{
				return this._Payid;
			}
			set
			{
				if ((this._Payid != value))
				{
					this.OnPayidChanging(value);
					this.SendPropertyChanging();
					this._Payid = value;
					this.SendPropertyChanged("Payid");
					this.OnPayidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckinID", DbType="Int")]
		public System.Nullable<int> CheckinID
		{
			get
			{
				return this._CheckinID;
			}
			set
			{
				if ((this._CheckinID != value))
				{
					if (this._CHECKINROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckinIDChanging(value);
					this.SendPropertyChanging();
					this._CheckinID = value;
					this.SendPropertyChanged("CheckinID");
					this.OnCheckinIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatus", DbType="NVarChar(50)")]
		public string PaymentStatus
		{
			get
			{
				return this._PaymentStatus;
			}
			set
			{
				if ((this._PaymentStatus != value))
				{
					this.OnPaymentStatusChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatus = value;
					this.SendPropertyChanged("PaymentStatus");
					this.OnPaymentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethods", DbType="NVarChar(50)")]
		public string PaymentMethods
		{
			get
			{
				return this._PaymentMethods;
			}
			set
			{
				if ((this._PaymentMethods != value))
				{
					this.OnPaymentMethodsChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethods = value;
					this.SendPropertyChanged("PaymentMethods");
					this.OnPaymentMethodsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHECKINROOM_PAYMENT", Storage="_CHECKINROOM", ThisKey="CheckinID", OtherKey="CheckinID", IsForeignKey=true)]
		public CHECKINROOM CHECKINROOM
		{
			get
			{
				return this._CHECKINROOM.Entity;
			}
			set
			{
				CHECKINROOM previousValue = this._CHECKINROOM.Entity;
				if (((previousValue != value) 
							|| (this._CHECKINROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHECKINROOM.Entity = null;
						previousValue.PAYMENTs.Remove(this);
					}
					this._CHECKINROOM.Entity = value;
					if ((value != null))
					{
						value.PAYMENTs.Add(this);
						this._CheckinID = value.CheckinID;
					}
					else
					{
						this._CheckinID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CHECKINROOM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RECEPTIONS")]
	public partial class RECEPTION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceptionID;
		
		private string _User;
		
		private string _Password;
		
		private string _FullName;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private System.Nullable<decimal> _Salary;
		
		private System.Nullable<int> _Days;
		
		private EntitySet<CHECKINROOM> _CHECKINROOMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceptionIDChanging(int value);
    partial void OnReceptionIDChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnDaysChanging(System.Nullable<int> value);
    partial void OnDaysChanged();
    #endregion
		
		public RECEPTION()
		{
			this._CHECKINROOMs = new EntitySet<CHECKINROOM>(new Action<CHECKINROOM>(this.attach_CHECKINROOMs), new Action<CHECKINROOM>(this.detach_CHECKINROOMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceptionID
		{
			get
			{
				return this._ReceptionID;
			}
			set
			{
				if ((this._ReceptionID != value))
				{
					this.OnReceptionIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptionID = value;
					this.SendPropertyChanged("ReceptionID");
					this.OnReceptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="NVarChar(255)")]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(255)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Days", DbType="Int")]
		public System.Nullable<int> Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				if ((this._Days != value))
				{
					this.OnDaysChanging(value);
					this.SendPropertyChanging();
					this._Days = value;
					this.SendPropertyChanged("Days");
					this.OnDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECEPTION_CHECKINROOM", Storage="_CHECKINROOMs", ThisKey="ReceptionID", OtherKey="ReceptionID")]
		public EntitySet<CHECKINROOM> CHECKINROOMs
		{
			get
			{
				return this._CHECKINROOMs;
			}
			set
			{
				this._CHECKINROOMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHECKINROOMs(CHECKINROOM entity)
		{
			this.SendPropertyChanging();
			entity.RECEPTION = this;
		}
		
		private void detach_CHECKINROOMs(CHECKINROOM entity)
		{
			this.SendPropertyChanging();
			entity.RECEPTION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.REVIEW")]
	public partial class REVIEW : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReviewID;
		
		private string _Content;
		
		private System.Nullable<int> _Rating;
		
		private System.Nullable<System.DateTime> _ReviewDate;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<int> _RoomID;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<ROOM> _ROOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReviewIDChanging(int value);
    partial void OnReviewIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnReviewDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReviewDateChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    #endregion
		
		public REVIEW()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._ROOM = default(EntityRef<ROOM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReviewID
		{
			get
			{
				return this._ReviewID;
			}
			set
			{
				if ((this._ReviewID != value))
				{
					this.OnReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewID = value;
					this.SendPropertyChanged("ReviewID");
					this.OnReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReviewDate
		{
			get
			{
				return this._ReviewDate;
			}
			set
			{
				if ((this._ReviewDate != value))
				{
					this.OnReviewDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewDate = value;
					this.SendPropertyChanged("ReviewDate");
					this.OnReviewDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int")]
		public System.Nullable<int> RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._ROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_REVIEW", Storage="_CUSTOMER", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.REVIEWs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.REVIEWs.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_REVIEW", Storage="_ROOM", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public ROOM ROOM
		{
			get
			{
				return this._ROOM.Entity;
			}
			set
			{
				ROOM previousValue = this._ROOM.Entity;
				if (((previousValue != value) 
							|| (this._ROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOM.Entity = null;
						previousValue.REVIEWs.Remove(this);
					}
					this._ROOM.Entity = value;
					if ((value != null))
					{
						value.REVIEWs.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ROOM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROOM")]
	public partial class ROOM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private string _RoomName;
		
		private string _RoomStatus;
		
		private System.Nullable<int> _RoomTypeID;
		
		private string _Area;
		
		private EntitySet<BOOKING> _BOOKINGs;
		
		private EntitySet<Image> _Images;
		
		private EntitySet<REVIEW> _REVIEWs;
		
		private EntitySet<RoomUtility> _RoomUtilities;
		
		private EntityRef<ROOMTYPE> _ROOMTYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnRoomStatusChanging(string value);
    partial void OnRoomStatusChanged();
    partial void OnRoomTypeIDChanging(System.Nullable<int> value);
    partial void OnRoomTypeIDChanged();
    partial void OnAreaChanging(string value);
    partial void OnAreaChanged();
    #endregion
		
		public ROOM()
		{
			this._BOOKINGs = new EntitySet<BOOKING>(new Action<BOOKING>(this.attach_BOOKINGs), new Action<BOOKING>(this.detach_BOOKINGs));
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			this._REVIEWs = new EntitySet<REVIEW>(new Action<REVIEW>(this.attach_REVIEWs), new Action<REVIEW>(this.detach_REVIEWs));
			this._RoomUtilities = new EntitySet<RoomUtility>(new Action<RoomUtility>(this.attach_RoomUtilities), new Action<RoomUtility>(this.detach_RoomUtilities));
			this._ROOMTYPE = default(EntityRef<ROOMTYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomName", DbType="NVarChar(255)")]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomStatus", DbType="NVarChar(50)")]
		public string RoomStatus
		{
			get
			{
				return this._RoomStatus;
			}
			set
			{
				if ((this._RoomStatus != value))
				{
					this.OnRoomStatusChanging(value);
					this.SendPropertyChanging();
					this._RoomStatus = value;
					this.SendPropertyChanged("RoomStatus");
					this.OnRoomStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="Int")]
		public System.Nullable<int> RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					if (this._ROOMTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="NVarChar(50)")]
		public string Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_BOOKING", Storage="_BOOKINGs", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<BOOKING> BOOKINGs
		{
			get
			{
				return this._BOOKINGs;
			}
			set
			{
				this._BOOKINGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_Image", Storage="_Images", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_REVIEW", Storage="_REVIEWs", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<REVIEW> REVIEWs
		{
			get
			{
				return this._REVIEWs;
			}
			set
			{
				this._REVIEWs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_RoomUtility", Storage="_RoomUtilities", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<RoomUtility> RoomUtilities
		{
			get
			{
				return this._RoomUtilities;
			}
			set
			{
				this._RoomUtilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_ROOM", Storage="_ROOMTYPE", ThisKey="RoomTypeID", OtherKey="RoomTypeID", IsForeignKey=true)]
		public ROOMTYPE ROOMTYPE
		{
			get
			{
				return this._ROOMTYPE.Entity;
			}
			set
			{
				ROOMTYPE previousValue = this._ROOMTYPE.Entity;
				if (((previousValue != value) 
							|| (this._ROOMTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOMTYPE.Entity = null;
						previousValue.ROOMs.Remove(this);
					}
					this._ROOMTYPE.Entity = value;
					if ((value != null))
					{
						value.ROOMs.Add(this);
						this._RoomTypeID = value.RoomTypeID;
					}
					else
					{
						this._RoomTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ROOMTYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BOOKINGs(BOOKING entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = this;
		}
		
		private void detach_BOOKINGs(BOOKING entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = null;
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = null;
		}
		
		private void attach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = this;
		}
		
		private void detach_REVIEWs(REVIEW entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = null;
		}
		
		private void attach_RoomUtilities(RoomUtility entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = this;
		}
		
		private void detach_RoomUtilities(RoomUtility entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROOMTYPE")]
	public partial class ROOMTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomTypeID;
		
		private string _TypeName;
		
		private System.Nullable<int> _PricePerHour;
		
		private System.Nullable<int> _PriceByDay;
		
		private System.Nullable<int> _OverNightPrice;
		
		private System.Nullable<int> _PriceFirstHour;
		
		private System.Nullable<int> _PriceOverTime;
		
		private EntitySet<ROOM> _ROOMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomTypeIDChanging(int value);
    partial void OnRoomTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnPricePerHourChanging(System.Nullable<int> value);
    partial void OnPricePerHourChanged();
    partial void OnPriceByDayChanging(System.Nullable<int> value);
    partial void OnPriceByDayChanged();
    partial void OnOverNightPriceChanging(System.Nullable<int> value);
    partial void OnOverNightPriceChanged();
    partial void OnPriceFirstHourChanging(System.Nullable<int> value);
    partial void OnPriceFirstHourChanged();
    partial void OnPriceOverTimeChanging(System.Nullable<int> value);
    partial void OnPriceOverTimeChanged();
    #endregion
		
		public ROOMTYPE()
		{
			this._ROOMs = new EntitySet<ROOM>(new Action<ROOM>(this.attach_ROOMs), new Action<ROOM>(this.detach_ROOMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(255)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerHour", DbType="Int")]
		public System.Nullable<int> PricePerHour
		{
			get
			{
				return this._PricePerHour;
			}
			set
			{
				if ((this._PricePerHour != value))
				{
					this.OnPricePerHourChanging(value);
					this.SendPropertyChanging();
					this._PricePerHour = value;
					this.SendPropertyChanged("PricePerHour");
					this.OnPricePerHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceByDay", DbType="Int")]
		public System.Nullable<int> PriceByDay
		{
			get
			{
				return this._PriceByDay;
			}
			set
			{
				if ((this._PriceByDay != value))
				{
					this.OnPriceByDayChanging(value);
					this.SendPropertyChanging();
					this._PriceByDay = value;
					this.SendPropertyChanged("PriceByDay");
					this.OnPriceByDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverNightPrice", DbType="Int")]
		public System.Nullable<int> OverNightPrice
		{
			get
			{
				return this._OverNightPrice;
			}
			set
			{
				if ((this._OverNightPrice != value))
				{
					this.OnOverNightPriceChanging(value);
					this.SendPropertyChanging();
					this._OverNightPrice = value;
					this.SendPropertyChanged("OverNightPrice");
					this.OnOverNightPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceFirstHour", DbType="Int")]
		public System.Nullable<int> PriceFirstHour
		{
			get
			{
				return this._PriceFirstHour;
			}
			set
			{
				if ((this._PriceFirstHour != value))
				{
					this.OnPriceFirstHourChanging(value);
					this.SendPropertyChanging();
					this._PriceFirstHour = value;
					this.SendPropertyChanged("PriceFirstHour");
					this.OnPriceFirstHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceOverTime", DbType="Int")]
		public System.Nullable<int> PriceOverTime
		{
			get
			{
				return this._PriceOverTime;
			}
			set
			{
				if ((this._PriceOverTime != value))
				{
					this.OnPriceOverTimeChanging(value);
					this.SendPropertyChanging();
					this._PriceOverTime = value;
					this.SendPropertyChanged("PriceOverTime");
					this.OnPriceOverTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_ROOM", Storage="_ROOMs", ThisKey="RoomTypeID", OtherKey="RoomTypeID")]
		public EntitySet<ROOM> ROOMs
		{
			get
			{
				return this._ROOMs;
			}
			set
			{
				this._ROOMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = this;
		}
		
		private void detach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomUtilities")]
	public partial class RoomUtility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomID;
		
		private int _UtilitiesID;
		
		private EntityRef<ROOM> _ROOM;
		
		private EntityRef<Utility> _Utility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnUtilitiesIDChanging(int value);
    partial void OnUtilitiesIDChanged();
    #endregion
		
		public RoomUtility()
		{
			this._ROOM = default(EntityRef<ROOM>);
			this._Utility = default(EntityRef<Utility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._ROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilitiesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UtilitiesID
		{
			get
			{
				return this._UtilitiesID;
			}
			set
			{
				if ((this._UtilitiesID != value))
				{
					if (this._Utility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilitiesIDChanging(value);
					this.SendPropertyChanging();
					this._UtilitiesID = value;
					this.SendPropertyChanged("UtilitiesID");
					this.OnUtilitiesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_RoomUtility", Storage="_ROOM", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public ROOM ROOM
		{
			get
			{
				return this._ROOM.Entity;
			}
			set
			{
				ROOM previousValue = this._ROOM.Entity;
				if (((previousValue != value) 
							|| (this._ROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOM.Entity = null;
						previousValue.RoomUtilities.Remove(this);
					}
					this._ROOM.Entity = value;
					if ((value != null))
					{
						value.RoomUtilities.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("ROOM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utility_RoomUtility", Storage="_Utility", ThisKey="UtilitiesID", OtherKey="UtilitiesID", IsForeignKey=true)]
		public Utility Utility
		{
			get
			{
				return this._Utility.Entity;
			}
			set
			{
				Utility previousValue = this._Utility.Entity;
				if (((previousValue != value) 
							|| (this._Utility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utility.Entity = null;
						previousValue.RoomUtilities.Remove(this);
					}
					this._Utility.Entity = value;
					if ((value != null))
					{
						value.RoomUtilities.Add(this);
						this._UtilitiesID = value.UtilitiesID;
					}
					else
					{
						this._UtilitiesID = default(int);
					}
					this.SendPropertyChanged("Utility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SERVICE")]
	public partial class SERVICE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceID;
		
		private string _ServiceName;
		
		private System.Nullable<int> _ServicePrice;
		
		private EntitySet<SERVICEREQUEST> _SERVICEREQUESTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnServicePriceChanging(System.Nullable<int> value);
    partial void OnServicePriceChanged();
    #endregion
		
		public SERVICE()
		{
			this._SERVICEREQUESTs = new EntitySet<SERVICEREQUEST>(new Action<SERVICEREQUEST>(this.attach_SERVICEREQUESTs), new Action<SERVICEREQUEST>(this.detach_SERVICEREQUESTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="NVarChar(255)")]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicePrice", DbType="Int")]
		public System.Nullable<int> ServicePrice
		{
			get
			{
				return this._ServicePrice;
			}
			set
			{
				if ((this._ServicePrice != value))
				{
					this.OnServicePriceChanging(value);
					this.SendPropertyChanging();
					this._ServicePrice = value;
					this.SendPropertyChanged("ServicePrice");
					this.OnServicePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_SERVICEREQUEST", Storage="_SERVICEREQUESTs", ThisKey="ServiceID", OtherKey="ServiceID")]
		public EntitySet<SERVICEREQUEST> SERVICEREQUESTs
		{
			get
			{
				return this._SERVICEREQUESTs;
			}
			set
			{
				this._SERVICEREQUESTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SERVICEREQUESTs(SERVICEREQUEST entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = this;
		}
		
		private void detach_SERVICEREQUESTs(SERVICEREQUEST entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SERVICEREQUEST")]
	public partial class SERVICEREQUEST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private System.Nullable<System.DateTime> _RequestDate;
		
		private System.Nullable<int> _CheckinID;
		
		private System.Nullable<int> _ServiceID;
		
		private string _Status;
		
		private string _Description;
		
		private System.Nullable<int> _ReceptionID;
		
		private EntityRef<CHECKINROOM> _CHECKINROOM;
		
		private EntityRef<SERVICE> _SERVICE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnRequestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestDateChanged();
    partial void OnCheckinIDChanging(System.Nullable<int> value);
    partial void OnCheckinIDChanged();
    partial void OnServiceIDChanging(System.Nullable<int> value);
    partial void OnServiceIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnReceptionIDChanging(System.Nullable<int> value);
    partial void OnReceptionIDChanged();
    #endregion
		
		public SERVICEREQUEST()
		{
			this._CHECKINROOM = default(EntityRef<CHECKINROOM>);
			this._SERVICE = default(EntityRef<SERVICE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="Date")]
		public System.Nullable<System.DateTime> RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckinID", DbType="Int")]
		public System.Nullable<int> CheckinID
		{
			get
			{
				return this._CheckinID;
			}
			set
			{
				if ((this._CheckinID != value))
				{
					if (this._CHECKINROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCheckinIDChanging(value);
					this.SendPropertyChanging();
					this._CheckinID = value;
					this.SendPropertyChanged("CheckinID");
					this.OnCheckinIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int")]
		public System.Nullable<int> ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._SERVICE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptionID", DbType="Int")]
		public System.Nullable<int> ReceptionID
		{
			get
			{
				return this._ReceptionID;
			}
			set
			{
				if ((this._ReceptionID != value))
				{
					this.OnReceptionIDChanging(value);
					this.SendPropertyChanging();
					this._ReceptionID = value;
					this.SendPropertyChanged("ReceptionID");
					this.OnReceptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHECKINROOM_SERVICEREQUEST", Storage="_CHECKINROOM", ThisKey="CheckinID", OtherKey="CheckinID", IsForeignKey=true)]
		public CHECKINROOM CHECKINROOM
		{
			get
			{
				return this._CHECKINROOM.Entity;
			}
			set
			{
				CHECKINROOM previousValue = this._CHECKINROOM.Entity;
				if (((previousValue != value) 
							|| (this._CHECKINROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHECKINROOM.Entity = null;
						previousValue.SERVICEREQUESTs.Remove(this);
					}
					this._CHECKINROOM.Entity = value;
					if ((value != null))
					{
						value.SERVICEREQUESTs.Add(this);
						this._CheckinID = value.CheckinID;
					}
					else
					{
						this._CheckinID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CHECKINROOM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_SERVICEREQUEST", Storage="_SERVICE", ThisKey="ServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public SERVICE SERVICE
		{
			get
			{
				return this._SERVICE.Entity;
			}
			set
			{
				SERVICE previousValue = this._SERVICE.Entity;
				if (((previousValue != value) 
							|| (this._SERVICE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SERVICE.Entity = null;
						previousValue.SERVICEREQUESTs.Remove(this);
					}
					this._SERVICE.Entity = value;
					if ((value != null))
					{
						value.SERVICEREQUESTs.Add(this);
						this._ServiceID = value.ServiceID;
					}
					else
					{
						this._ServiceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SERVICE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
